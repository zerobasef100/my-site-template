"use client"

import * as React from "react"
import { useState, useEffect } from "react"
import { Card, CardContent } from "@/components/ui/card"
import { Briefcase, GraduationCap, Award, Heart, Coffee, Book, Plus, X, Settings, Calendar, Building, User, Trophy, Star, Lightbulb, Target, Rocket, Shield, Sparkles, Code, Database, Palette, Megaphone, BarChart3, LineChart, PieChart, Activity, Brain, Cpu, Layers, Package, Server, Smartphone, Monitor, Wifi, Cloud, Lock, Key, Eye, Search, Filter, Edit, FileText, FolderOpen, GitBranch, Hash, Inbox, Send, MessageSquare, Music, Camera, Video, Mic, Volume2, Headphones, Radio, Zap, Globe, Users, TrendingUp, BookOpen, MapPin, Clock, CheckCircle, AlertCircle, Home, School } from "lucide-react"
import { EditableText } from "@/components/editable/editable-text"
import { EditableMedia } from "@/components/editable/editable-media"
import { EditableBackground } from "@/components/editable/editable-background"
import { useInlineEditor } from "@/contexts/inline-editor-context"
import { COMMON_STYLES } from "@/lib/constants"

// ÏÇ¨Ïö© Í∞ÄÎä•Ìïú ÏïÑÏù¥ÏΩòÎì§ - Í≤ΩÌóò Ïπ¥ÎìúÏö©
const AVAILABLE_ICONS = {
  briefcase: Briefcase,
  graduation: GraduationCap,
  award: Award,
  trophy: Trophy,
  star: Star,
  lightbulb: Lightbulb,
  target: Target,
  rocket: Rocket,
  shield: Shield,
  building: Building,
  calendar: Calendar,
  book: Book,
  heart: Heart,
  coffee: Coffee,
  user: User,
  zap: Zap,
  globe: Globe,
  users: Users,
  trending: TrendingUp,
  bookOpen: BookOpen,
  mapPin: MapPin,
  clock: Clock,
  check: CheckCircle,
  alert: AlertCircle,
  home: Home,
  school: School,
}

// ÏÇ¨Ïö© Í∞ÄÎä•Ìïú ÏïÑÏù¥ÏΩòÎì§ - Ïä§ÌÇ¨Ïö©
const SKILL_ICONS = {
  trophy: Trophy,
  sparkles: Sparkles,
  target: Target,
  rocket: Rocket,
  star: Star,
  zap: Zap,
  lightbulb: Lightbulb,
  brain: Brain,
  code: Code,
  database: Database,
  palette: Palette,
  megaphone: Megaphone,
  barChart: BarChart3,
  lineChart: LineChart,
  pieChart: PieChart,
  activity: Activity,
  cpu: Cpu,
  layers: Layers,
  package: Package,
  server: Server,
  smartphone: Smartphone,
  monitor: Monitor,
  wifi: Wifi,
  cloud: Cloud,
  lock: Lock,
  key: Key,
  eye: Eye,
  search: Search,
  filter: Filter,
  edit: Edit,
  fileText: FileText,
  folderOpen: FolderOpen,
  gitBranch: GitBranch,
  hash: Hash,
  inbox: Inbox,
  send: Send,
  messageSquare: MessageSquare,
  music: Music,
  camera: Camera,
  video: Video,
  mic: Mic,
  volume: Volume2,
  headphones: Headphones,
  radio: Radio,
  heart: Heart,
  shield: Shield,
  globe: Globe,
  users: Users,
}

export function About() {
  const { getData, saveData, isEditMode, saveToFile } = useInlineEditor()
  // Í∏∞Î≥∏ Îç∞Ïù¥ÌÑ∞
  const defaultInfo = {
    title: "ÏÜåÍ∞ú",
    subtitle: "ÎãπÏã†Ïùò Ï†ÑÎ¨∏ÏÑ±Í≥º Ïó¥Ï†ïÏùÑ ÏÜåÍ∞úÌï¥Ï£ºÏÑ∏Ïöî.",
    background: {"image":"","video":"","color":"#bdcaff","opacity":0.1},
    experienceCards: [{"icon":"user","title":"Î∂ÄÏÇ∞Ï∂úÏÉù","period":"1996.09.24","description":"Î∂ÄÏÇ∞Ïãú Ï∂úÏÉù"},{"icon":"graduation","title":"ÎèôÏïÑÎåÄÌïôÍµê","period":"2022","description":"ÎèôÏïÑÎåÄÌïôÍµê Ï°∞Í≤ΩÌïôÍ≥º Ï°∏ÏóÖ"},{"icon":"briefcase","title":"ÎπÖÏä§ÏºÄÏù¥ÌîÑ","period":"2022","description":"Ï°∞Í≤ΩÏÑ§Í≥Ñ / ÏóîÏßÄÎãàÏñ¥ÎßÅ"}],
    skills: [{"icon":"star","title":"Auto CAD","description":"Ïã§ÏãúÏÑ§Í≥Ñ / Dream PlusÌôúÏö©"},{"icon":"star","title":"3D Î™®Îç∏ÎßÅ","description":"Ïä§ÏºÄÏπòÏóÖ / Î£®ÎØ∏Ïò®"},{"icon":"star","title":"Adobe","description":"Ìè¨ÌÜ†ÏÉµ / ÏùºÎü¨Ïä§Ìä∏"}],
    storyTitle: "Ïù¥ÏßÑÏö∞Ïùò Ïù¥ÏïºÍ∏∞",
    story: ["Ï†ÄÎäî Í∏∞Ïà†ÏùÑ ÌÜµÌï¥ ÏÇ¨ÎûåÎì§Ïùò ÏÇ∂ÏùÑ Îçî Ìé∏Î¶¨ÌïòÍ≥† ÏùòÎØ∏ ÏûàÍ≤å ÎßåÎìúÎäî ÏùºÏóê Ïó¥Ï†ïÏùÑ Í∞ÄÏßÄÍ≥† ÏûàÏäµÎãàÎã§.","Îã§ÏñëÌïú ÌîÑÎ°úÏ†ùÌä∏Î•º ÌÜµÌï¥ Î¨∏Ï†ú Ìï¥Í≤∞ Îä•Î†•Í≥º Ï∞ΩÏùòÏ†ÅÏù∏ ÏÇ¨Í≥†Î•º ÌÇ§ÏõåÏôîÏúºÎ©∞, ÌåÄÏõêÎì§Í≥ºÏùò ÌòëÏóÖÏùÑ ÌÜµÌï¥ Ìï®Íªò ÏÑ±Ïû•ÌïòÎäî Í∞ÄÏπòÎ•º Î∞∞Ïõ†ÏäµÎãàÎã§.","ÏïûÏúºÎ°úÎèÑ ÏßÄÏÜçÏ†ÅÏù∏ ÌïôÏäµÍ≥º ÎèÑÏ†ÑÏùÑ ÌÜµÌï¥ Îçî ÎÇòÏùÄ Í∞úÎ∞úÏûêÍ∞Ä ÎêòÍ∏∞ ÏúÑÌï¥ ÎÖ∏Î†•ÌïòÍ≤†ÏäµÎãàÎã§."],
    storyImage: "",
    hobbies: ["üßó‚Äç‚ôÄÔ∏è ÌÅ¥ÎùºÏù¥Î∞ç","‚õìÔ∏è Ìó¨Ïä§","üå± Í∞ÄÎìúÎãù","üìö ÎèÖÏÑú","üé¨ ÏòÅÌôî Í∞êÏÉÅ"]
  }
  
  const [aboutInfo, setAboutInfo] = useState(defaultInfo)
  const [backgroundData, setBackgroundData] = useState(
    defaultInfo.background
  )
  const [showCareerModal, setShowCareerModal] = useState(false)
  const [showSkillModal, setShowSkillModal] = useState(false)
  const [showHobbyModal, setShowHobbyModal] = useState(false)
  
  // localStorageÏóêÏÑú Îç∞Ïù¥ÌÑ∞ Î°úÎìú - Ìé∏Ïßë Î™®ÎìúÍ∞Ä Î≥ÄÍ≤ΩÎê† ÎïåÎßàÎã§ Ïã§Ìñâ
  useEffect(() => {
    const savedData = getData('about-info') as typeof defaultInfo | null
    if (savedData) {
      setAboutInfo({ ...defaultInfo, ...savedData })
      // background Îç∞Ïù¥ÌÑ∞Í∞Ä ÏûàÏúºÎ©¥ ÏÑ§Ï†ï
      if (savedData.background) {
        setBackgroundData(savedData.background)
      }
    }
    
    const savedBg = getData('about-background') as { image: string; video: string; color: string; opacity: number } | null
    if (savedBg) {
      setBackgroundData(savedBg)
    }
  }, [isEditMode]) // isEditModeÍ∞Ä Î≥ÄÍ≤ΩÎê† ÎïåÎßàÎã§ Îç∞Ïù¥ÌÑ∞ Îã§Ïãú Î°úÎìú
  
  const updateAboutInfo = (key: string, value: string | boolean | typeof aboutInfo.skills | typeof aboutInfo.experienceCards | typeof aboutInfo.story | typeof aboutInfo.hobbies | number) => {
    const newInfo = { ...aboutInfo, [key]: value }
    setAboutInfo(newInfo)
    saveData('about-info', newInfo)
  }
  
  const updateExperienceCard = (index: number, field: string, value: string) => {
    const newCards = [...aboutInfo.experienceCards]
    newCards[index] = { ...newCards[index], [field]: value }
    updateAboutInfo('experienceCards', newCards)
  }
  
  const addExperienceCard = () => {
    updateAboutInfo('experienceCards', [...aboutInfo.experienceCards, { 
      icon: "briefcase", 
      title: "ÏÉà Í≤ΩÌóò", 
      period: "2024", 
      description: "ÏÑ§Î™ÖÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî" 
    }])
  }
  
  const removeExperienceCard = (index: number) => {
    updateAboutInfo('experienceCards', aboutInfo.experienceCards.filter((_, i) => i !== index))
  }
  
  const updateSkill = (index: number, field: string, value: string) => {
    const newSkills = [...aboutInfo.skills]
    newSkills[index] = { ...newSkills[index], [field]: value }
    updateAboutInfo('skills', newSkills)
  }
  
  const addSkill = () => {
    updateAboutInfo('skills', [...aboutInfo.skills, { icon: "star", title: "ÏÉà Ïä§ÌÇ¨", description: "Ïä§ÌÇ¨ ÏÑ§Î™Ö" }])
  }
  
  const removeSkill = (index: number) => {
    updateAboutInfo('skills', aboutInfo.skills.filter((_, i) => i !== index))
  }
  
  const updateStory = (index: number, value: string) => {
    const newStory = [...aboutInfo.story]
    newStory[index] = value
    updateAboutInfo('story', newStory)
  }
  
  const addStory = () => {
    updateAboutInfo('story', [...aboutInfo.story, "ÏÉàÎ°úÏö¥ Î¨∏Îã®"])
  }
  
  const removeStory = (index: number) => {
    updateAboutInfo('story', aboutInfo.story.filter((_, i) => i !== index))
  }
  
  const updateHobby = (index: number, value: string) => {
    const newHobbies = [...aboutInfo.hobbies]
    newHobbies[index] = value
    updateAboutInfo('hobbies', newHobbies)
  }
  
  const addHobby = () => {
    updateAboutInfo('hobbies', [...aboutInfo.hobbies, "üéØ ÏÉà Ï∑®ÎØ∏"])
  }
  
  const removeHobby = (index: number) => {
    updateAboutInfo('hobbies', aboutInfo.hobbies.filter((_, i) => i !== index))
  }
  return (
    <EditableBackground
      image={backgroundData.image}
      video={backgroundData.video}
      color={backgroundData.color}
      opacity={backgroundData.opacity}
      onChange={(data) => {
        const newData = { ...backgroundData, ...data }
        setBackgroundData(newData)
        saveData('about-background', newData)
        
        // aboutInfoÎèÑ ÏóÖÎç∞Ïù¥Ìä∏ (ÌååÏùº Ï†ÄÏû•ÏùÑ ÏúÑÌï¥)
        const updatedAboutInfo = { ...aboutInfo, background: newData }
        setAboutInfo(updatedAboutInfo)
        saveData('about-info', updatedAboutInfo)
      }}
      storageKey="about-background"
      className="py-20 bg-muted/30 relative"
    >
      <section id="about" className="w-full">
        <div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 relative z-10">
          {/* ÏÑπÏÖò Ï†úÎ™© */}
          <div className="text-center mb-16">
            <h2 className="text-3xl sm:text-4xl font-bold text-foreground mb-4">
              <EditableText
                value={aboutInfo.title}
                onChange={(value) => updateAboutInfo('title', value)}
                storageKey="about-title"
              />
            </h2>
            <p className="text-lg text-muted-foreground max-w-3xl mx-auto leading-relaxed">
              <EditableText
                value={aboutInfo.subtitle}
                onChange={(value) => updateAboutInfo('subtitle', value)}
                storageKey="about-subtitle"
                multiline
              />
            </p>
          </div>

          {/* Í≤ΩÌóò Ïπ¥Îìú (Í≤ΩÎ†•/ÌïôÎ†•/ÏûêÍ≤©Ï¶ù Îì±) */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-16">
            {/* Í≤ΩÌóò Ïπ¥ÎìúÎì§ */}
            {aboutInfo.experienceCards?.map((card, index) => {
              const Icon = AVAILABLE_ICONS[card.icon as keyof typeof AVAILABLE_ICONS] || Briefcase
              return (
                <Card key={index} className="border-0 shadow-lg hover:shadow-xl transition-all duration-300 relative">
                  <CardContent className="p-6">
                    {isEditMode && (
                      <button
                        onClick={() => removeExperienceCard(index)}
                        className={COMMON_STYLES.deleteButton}
                      >
                        <X className={COMMON_STYLES.deleteIcon} />
                      </button>
                    )}
                    <div className="flex items-start space-x-4">
                      <div className="w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center flex-shrink-0">
                        <Icon className="h-6 w-6 text-primary" />
                      </div>
                      <div className="flex-1">
                        <h3 className="font-semibold text-foreground mb-1">
                          <EditableText
                            value={card.title}
                            onChange={(value) => updateExperienceCard(index, 'title', value)}
                            storageKey={`about-experience-${index}-title`}
                          />
                        </h3>
                        <p className="text-sm text-primary mb-2">
                          <EditableText
                            value={card.period}
                            onChange={(value) => updateExperienceCard(index, 'period', value)}
                            storageKey={`about-experience-${index}-period`}
                          />
                        </p>
                        <p className="text-sm text-muted-foreground">
                          <EditableText
                            value={card.description}
                            onChange={(value) => updateExperienceCard(index, 'description', value)}
                            storageKey={`about-experience-${index}-description`}
                          />
                        </p>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              )
            })}
            
            {/* Ï∂îÍ∞Ä Î≤ÑÌäº */}
            {isEditMode && (
              <Card className="border-2 border-dashed border-muted-foreground/30 shadow-none hover:border-primary transition-all cursor-pointer"
                    onClick={() => setShowCareerModal(true)}>
                <CardContent className="p-6 flex items-center justify-center">
                  <div className="text-center">
                    <Settings className="h-8 w-8 mx-auto mb-2 text-muted-foreground" />
                    <p className="text-sm text-muted-foreground">Í≤ΩÌóò Ïπ¥Îìú Ìé∏Ïßë</p>
                  </div>
                </CardContent>
              </Card>
            )}
          </div>

          {/* ÌïµÏã¨ Ïó≠Îüâ */}
          {(aboutInfo.skills.length > 0 || isEditMode) && (
            <div className="mb-16">
              <h3 className="text-2xl font-bold text-foreground mb-8 text-center">
                ÌïµÏã¨ Ïó≠Îüâ
              </h3>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                {aboutInfo.skills.map((skill, index) => {
                  const Icon = SKILL_ICONS[skill.icon as keyof typeof SKILL_ICONS] || Trophy
                  return (
                    <div key={index} className="text-center relative">
                      {isEditMode && (
                        <button
                          onClick={() => removeSkill(index)}
                          className={COMMON_STYLES.deleteButton}
                        >
                          <X className={COMMON_STYLES.deleteIcon} />
                        </button>
                      )}
                      <div className="w-16 h-16 mx-auto mb-4 bg-primary/10 rounded-full flex items-center justify-center">
                        <Icon className="h-8 w-8 text-primary" />
                      </div>
                      <h4 className="font-semibold text-foreground mb-2">
                        <EditableText
                          value={skill.title}
                          onChange={(value) => updateSkill(index, 'title', value)}
                          storageKey={`about-skill-${index}-title`}
                        />
                      </h4>
                      <p className="text-sm text-muted-foreground">
                        <EditableText
                          value={skill.description}
                          onChange={(value) => updateSkill(index, 'description', value)}
                          storageKey={`about-skill-${index}-description`}
                          multiline
                        />
                      </p>
                    </div>
                  )
                })}
                {isEditMode && (
                  <div 
                    className="text-center border-2 border-dashed border-muted-foreground/30 rounded-lg p-6 flex items-center justify-center cursor-pointer hover:border-primary transition-all"
                    onClick={() => setShowSkillModal(true)}
                  >
                    <div>
                      <Settings className="h-8 w-8 mx-auto mb-2 text-muted-foreground" />
                      <p className="text-sm text-muted-foreground">Ïä§ÌÇ¨ Ìé∏Ïßë</p>
                    </div>
                  </div>
                )}
              </div>
            </div>
          )}

          {/* ÏûêÍ∏∞ÏÜåÍ∞ú ÏÉÅÏÑ∏ */}
          {(aboutInfo.story.length > 0 || isEditMode) && (
            <div className="bg-card rounded-2xl shadow-lg overflow-hidden">
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-0 items-stretch">
                <div className="p-8">
                  <h3 className="text-2xl font-bold text-foreground mb-4">
                    <EditableText
                      value={aboutInfo.storyTitle}
                      onChange={(value) => updateAboutInfo('storyTitle', value)}
                      storageKey="about-storyTitle"
                    />
                  </h3>
                  {aboutInfo.story.map((paragraph, index) => (
                    <div key={index} className="relative mb-4">
                      {isEditMode && (
                        <button
                          onClick={() => removeStory(index)}
                          className={COMMON_STYLES.deleteButton}
                        >
                          <X className={COMMON_STYLES.deleteIcon} />
                        </button>
                      )}
                      <p className="text-muted-foreground leading-relaxed">
                        <EditableText
                          value={paragraph}
                          onChange={(value) => updateStory(index, value)}
                          storageKey={`about-story-${index}`}
                          multiline
                        />
                      </p>
                    </div>
                  ))}
                  {isEditMode && (
                    <button
                      onClick={addStory}
                      className="mt-2 px-4 py-2 border border-dashed border-muted-foreground/30 rounded-lg hover:border-primary transition-all"
                    >
                      <Plus className="h-4 w-4 inline mr-2" />
                      Î¨∏Îã® Ï∂îÍ∞Ä
                    </button>
                  )}
                </div>
                
                {/* Ïù¥ÎØ∏ÏßÄ ÏòÅÏó≠ */}
                <div className="relative w-full h-full min-h-[500px] lg:min-h-full">
                  <EditableMedia
                    src={aboutInfo.storyImage}
                    onChange={(src) => updateAboutInfo('storyImage', src)}
                    type="image"
                    storageKey="about-storyImage"
                    className="w-full h-full object-cover"
                    alt="ÏÜåÍ∞ú Ïù¥ÎØ∏ÏßÄ"
                    purpose="about-image"
                  />
                </div>
              </div>
            </div>
          )}

          {/* Ï∑®ÎØ∏ & Í¥ÄÏã¨ÏÇ¨ */}
          {(aboutInfo.hobbies.length > 0 || isEditMode) && (
            <div className="mt-16 text-center">
              <h3 className="text-2xl font-bold text-foreground mb-8">
                Ï∑®ÎØ∏ & Í¥ÄÏã¨ÏÇ¨
              </h3>
              <div className="flex flex-wrap justify-center gap-3">
                {aboutInfo.hobbies.map((hobby, index) => (
                  <span key={index} className="px-4 py-2 bg-primary/10 text-primary rounded-full text-sm relative group flex items-center justify-center">
                    {isEditMode && (
                      <button
                        onClick={() => removeHobby(index)}
                        className={`${COMMON_STYLES.deleteButton} opacity-0 group-hover:opacity-100 transition-opacity`}
                      >
                        <X className={COMMON_STYLES.deleteIcon} />
                      </button>
                    )}
                    <EditableText
                      value={hobby}
                      onChange={(value) => updateHobby(index, value)}
                      storageKey={`about-hobby-${index}`}
                    />
                  </span>
                ))}
                {isEditMode && (
                  <button
                    onClick={() => setShowHobbyModal(true)}
                    className="px-4 py-2 border border-dashed border-muted-foreground/30 rounded-full text-sm hover:border-primary transition-all"
                  >
                    <Settings className="h-4 w-4 inline mr-1" />
                    Ìé∏Ïßë
                  </button>
                )}
              </div>
            </div>
          )}
        </div>
      </section>
      
      {/* Í≤ΩÌóò Ïπ¥Îìú Ìé∏Ïßë Î™®Îã¨ */}
      {showCareerModal && isEditMode && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-[9999]">
          <div className="bg-background border rounded-lg p-6 max-w-3xl w-full mx-4 max-h-[80vh] overflow-y-auto">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-semibold">Í≤ΩÌóò Ïπ¥Îìú Ìé∏Ïßë</h3>
              <button
                onClick={() => setShowCareerModal(false)}
                className="p-1 hover:bg-muted rounded-lg"
              >
                <X className="h-5 w-5" />
              </button>
            </div>
            
            <div className="space-y-3">
              {aboutInfo.experienceCards?.map((card, index) => {
                const Icon = AVAILABLE_ICONS[card.icon as keyof typeof AVAILABLE_ICONS] || Briefcase
                return (
                  <div key={index} className="flex items-start gap-3 p-3 border rounded-lg bg-muted/30">
                    {/* ÏïÑÏù¥ÏΩò ÏÑ†ÌÉù */}
                    <select
                      value={card.icon}
                      onChange={(e) => updateExperienceCard(index, 'icon', e.target.value)}
                      className="w-40 px-2 py-2 border rounded-lg bg-background"
                    >
                      <option value="briefcase">üíº ÏßÅÏû•</option>
                      <option value="graduation">üéì ÌïôÍµê</option>
                      <option value="award">üèÜ ÏàòÏÉÅ</option>
                      <option value="trophy">üèÖ ÏÑ±Í≥º</option>
                      <option value="star">‚≠ê Ïö∞Ïàò</option>
                      <option value="lightbulb">üí° ÏïÑÏù¥ÎîîÏñ¥</option>
                      <option value="target">üéØ Î™©Ìëú</option>
                      <option value="rocket">üöÄ ÏãúÏûë</option>
                      <option value="shield">üõ°Ô∏è Î≥¥Ïïà</option>
                      <option value="building">üè¢ ÌöåÏÇ¨</option>
                      <option value="calendar">üìÖ Í∏∞Í∞Ñ</option>
                      <option value="book">üìö ÍµêÏú°</option>
                      <option value="heart">‚ù§Ô∏è Ïó¥Ï†ï</option>
                      <option value="coffee">‚òï ÏùºÏÉÅ</option>
                      <option value="user">üë§ Í∞úÏù∏</option>
                    </select
>
                    
                    <div className="flex-1 space-y-2">
                      <input
                        type="text"
                        value={card.title}
                        onChange={(e) => updateExperienceCard(index, 'title', e.target.value)}
                        placeholder="Ïòà: ABC ÌöåÏÇ¨, ÏÑúÏö∏ÎåÄÌïôÍµê, Íµ¨Í∏Ä ÏûêÍ≤©Ï¶ù"
                        className="w-full px-3 py-2 border rounded-lg bg-background font-semibold"
                      />
                      
                      <div className="flex gap-2">
                        <input
                          type="text"
                          value={card.period}
                          onChange={(e) => updateExperienceCard(index, 'period', e.target.value)}
                          placeholder="Ïòà: 2020 - ÌòÑÏû¨"
                          className="flex-1 px-3 py-2 border rounded-lg bg-background"
                        />
                        
                        <input
                          type="text"
                          value={card.description}
                          onChange={(e) => updateExperienceCard(index, 'description', e.target.value)}
                          placeholder="Ïòà: ÎßàÏºÄÌåÖ Îß§ÎãàÏ†Ä, Í≤ΩÏòÅÌïô ÌïôÏÇ¨, GAIQ Ïù∏Ï¶ù"
                          className="flex-1 px-3 py-2 border rounded-lg bg-background"
                        />
                      </div>
                    </div>
                    
                    <button
                      onClick={() => removeExperienceCard(index)}
                      className="p-2 text-destructive hover:bg-destructive/10 rounded-lg"
                    >
                      <X className="h-4 w-4" />
                    </button>
                  </div>
                )
              })}
              
              <button
                onClick={addExperienceCard}
                className="w-full py-3 border-2 border-dashed rounded-lg hover:border-primary hover:bg-primary/5 transition-all"
              >
                <Plus className="h-4 w-4 inline mr-2" />
                Ïπ¥Îìú Ï∂îÍ∞Ä
              </button>
            </div>
            
            <div className="mt-6 pt-4 border-t">
              <div className="flex gap-2">
                <button
                  onClick={() => setShowCareerModal(false)}
                  className="flex-1 py-2 bg-muted text-foreground rounded-lg hover:bg-muted/80"
                >
                  Îã´Í∏∞
                </button>
                <button
                  onClick={async () => {
                    const success = await saveToFile('about', 'Info', aboutInfo)
                    if (success) {
                      alert('‚úÖ ÏÜåÍ∞ú ÏÑ§Ï†ïÏù¥ ÌååÏùºÏóê Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§!')
                      setShowCareerModal(false)
                    } else {
                      alert('‚ùå ÌååÏùº Ï†ÄÏû•Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.')
                    }
                  }}
                  className="flex-1 py-2 bg-primary text-primary-foreground rounded-lg hover:bg-primary/90 font-medium"
                >
                  üìÅ ÌååÏùºÏóê Ï†ÄÏû•
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
      
      {/* Ïä§ÌÇ¨ Ìé∏Ïßë Î™®Îã¨ */}
      {showSkillModal && isEditMode && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-[2147483647]">
          <div className="bg-background border rounded-lg p-6 max-w-2xl w-full mx-4 max-h-[80vh] overflow-y-auto">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-semibold">ÌïµÏã¨ Ïó≠Îüâ Ìé∏Ïßë</h3>
              <button
                onClick={() => setShowSkillModal(false)}
                className="p-1 hover:bg-muted rounded-lg"
              >
                <X className="h-5 w-5" />
              </button>
            </div>
            
            <div className="space-y-3">
              {aboutInfo.skills.map((skill, index) => {
                const Icon = SKILL_ICONS[skill.icon as keyof typeof SKILL_ICONS] || Trophy
                return (
                  <div key={index} className="flex items-start gap-3 p-3 border rounded-lg bg-muted/30">
                    {/* ÏïÑÏù¥ÏΩò ÏÑ†ÌÉù */}
                    <div className="flex flex-col items-center gap-2">
                      <div className="w-12 h-12 rounded-full bg-primary/10 flex items-center justify-center">
                        <Icon className="h-6 w-6 text-primary" />
                      </div>
                      <select
                        value={skill.icon}
                        onChange={(e) => updateSkill(index, 'icon', e.target.value)}
                        className="w-32 px-2 py-1 text-xs border rounded-lg bg-background"
                      >
                        <optgroup label="Í∏∞Ïà† Ïä§ÌÇ¨">
                          <option value="code">üíª ÏΩîÎìú/Í∞úÎ∞ú</option>
                          <option value="database">üóúÔ∏è Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§</option>
                          <option value="server">üåê ÏÑúÎ≤Ñ/ÌÅ¥ÎùºÏö∞Îìú</option>
                          <option value="smartphone">üì± Î™®Î∞îÏùº</option>
                          <option value="monitor">üñ•Ô∏è ÌîÑÎ°†Ìä∏ÏóîÎìú</option>
                          <option value="cpu">ü§ñ AI/ML</option>
                          <option value="gitBranch">üåø Git/Î≤ÑÏ†ÑÍ¥ÄÎ¶¨</option>
                          <option value="lock">üîí Î≥¥Ïïà</option>
                        </optgroup>
                        <optgroup label="ÎπÑÏ¶àÎãàÏä§">
                          <option value="barChart">üìä Îç∞Ïù¥ÌÑ∞ Î∂ÑÏÑù</option>
                          <option value="lineChart">üìà ÏÑ±Í≥º Î∂ÑÏÑù</option>
                          <option value="pieChart">ü•ß ÌÜµÍ≥Ñ/ÏãúÍ∞ÅÌôî</option>
                          <option value="megaphone">üì¢ ÎßàÏºÄÌåÖ</option>
                          <option value="target">üéØ Ï†ÑÎûµ/Í∏∞Ìöç</option>
                          <option value="users">üë• ÌåÄÏõåÌÅ¨</option>
                        </optgroup>
                        <optgroup label="Ï∞ΩÏùòÏ†Å Ïä§ÌÇ¨">
                          <option value="palette">üé® ÎîîÏûêÏù∏</option>
                          <option value="camera">üì∑ ÏÇ¨ÏßÑ/ÏòÅÏÉÅ</option>
                          <option value="music">üéµ ÏùåÏïÖ/Ïò§ÎîîÏò§</option>
                          <option value="edit">‚úèÔ∏è Í∏ÄÏì∞Í∏∞/Ìé∏Ïßë</option>
                          <option value="video">üé¨ ÏòÅÏÉÅ Ï†úÏûë</option>
                        </optgroup>
                        <optgroup label="ÏùºÎ∞ò Ïó≠Îüâ">
                          <option value="trophy">üèÜ Î¶¨ÎçîÏã≠</option>
                          <option value="sparkles">‚ú® ÌòÅÏã†</option>
                          <option value="rocket">üöÄ Ïã§ÌñâÎ†•</option>
                          <option value="brain">üß† Î∂ÑÏÑùÎ†•</option>
                          <option value="lightbulb">üí° Ï∞ΩÏùòÎ†•</option>
                          <option value="zap">‚ö° ÏÜçÎèÑ/Ìö®Ïú®</option>
                          <option value="star">‚≠ê Ï†ÑÎ¨∏ÏÑ±</option>
                          <option value="heart">‚ù§Ô∏è Ïó¥Ï†ï</option>
                          <option value="shield">üõ°Ô∏è Ïã†Î¢∞ÏÑ±</option>
                          <option value="globe">üåç Í∏ÄÎ°úÎ≤å</option>
                        </optgroup>
                      </select>
                    </div>
                    
                    <div className="flex-1 space-y-2">
                      <input
                        type="text"
                        value={skill.title}
                        onChange={(e) => updateSkill(index, 'title', e.target.value)}
                        placeholder="Ïòà: ÌîÑÎ°†Ìä∏ÏóîÎìú Í∞úÎ∞ú, Îç∞Ïù¥ÌÑ∞ Î∂ÑÏÑù, ÌîÑÎ°úÏ†ùÌä∏ Í¥ÄÎ¶¨"
                        className="w-full px-3 py-2 border rounded-lg bg-background font-semibold"
                      />
                      
                      <textarea
                        value={skill.description}
                        onChange={(e) => updateSkill(index, 'description', e.target.value)}
                        placeholder="Ïòà: ReactÏôÄ TypeScriptÎ•º ÌôúÏö©Ìïú Î™®Îçò Ïõπ Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò Í∞úÎ∞ú"
                        className="w-full px-3 py-2 border rounded-lg bg-background resize-none"
                        rows={2}
                      />
                    </div>
                    
                    <button
                      onClick={() => removeSkill(index)}
                      className="p-2 text-destructive hover:bg-destructive/10 rounded-lg"
                    >
                      <X className="h-4 w-4" />
                    </button>
                  </div>
                )
              })}
              
              <button
                onClick={addSkill}
                className="w-full py-3 border-2 border-dashed rounded-lg hover:border-primary hover:bg-primary/5 transition-all"
              >
                <Plus className="h-4 w-4 inline mr-2" />
                Ïä§ÌÇ¨ Ï∂îÍ∞Ä
              </button>
            </div>
            
            <div className="mt-6 pt-4 border-t">
              <p className="text-sm text-muted-foreground mb-4">
                üí° ÌåÅ: ÏïÑÏù¥ÏΩòÏùÑ ÏÑ†ÌÉùÌïòÍ≥† Ï†úÎ™©Í≥º ÏÑ§Î™ÖÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî. ÌïÑÏöîÌïú ÎßåÌÅº ÏûêÏú†Î°≠Í≤å Ï∂îÍ∞ÄÌï† Ïàò ÏûàÏäµÎãàÎã§.
              </p>
              <div className="flex gap-2">
                <button
                  onClick={() => setShowSkillModal(false)}
                  className="flex-1 py-2 bg-muted text-foreground rounded-lg hover:bg-muted/80"
                >
                  Îã´Í∏∞
                </button>
                <button
                  onClick={async () => {
                    const success = await saveToFile('about', 'Info', aboutInfo)
                    if (success) {
                      alert('‚úÖ ÏÜåÍ∞ú ÏÑ§Ï†ïÏù¥ ÌååÏùºÏóê Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§!')
                      setShowSkillModal(false)
                    } else {
                      alert('‚ùå ÌååÏùº Ï†ÄÏû•Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.')
                    }
                  }}
                  className="flex-1 py-2 bg-primary text-primary-foreground rounded-lg hover:bg-primary/90 font-medium"
                >
                  üìÅ ÌååÏùºÏóê Ï†ÄÏû•
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
      
      {/* Ï∑®ÎØ∏ Ìé∏Ïßë Î™®Îã¨ */}
      {showHobbyModal && isEditMode && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-[2147483647]">
          <div className="bg-background border rounded-lg p-6 max-w-2xl w-full mx-4 max-h-[80vh] overflow-y-auto">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-semibold">Ï∑®ÎØ∏ & Í¥ÄÏã¨ÏÇ¨ Ìé∏Ïßë</h3>
              <button
                onClick={() => setShowHobbyModal(false)}
                className="p-1 hover:bg-muted rounded-lg"
              >
                <X className="h-5 w-5" />
              </button>
            </div>
            
            <div className="space-y-3">
              {aboutInfo.hobbies.map((hobby, index) => (
                <div key={index} className="flex items-center gap-3 p-3 border rounded-lg">
                  <input
                    type="text"
                    value={hobby}
                    onChange={(e) => updateHobby(index, e.target.value)}
                    placeholder="Ïòà: üìö ÎèÖÏÑú"
                    className="flex-1 px-3 py-2 border rounded-lg bg-background"
                  />
                  
                  <button
                    onClick={() => removeHobby(index)}
                    className="p-2 text-destructive hover:bg-destructive/10 rounded-lg"
                  >
                    <X className="h-4 w-4" />
                  </button>
                </div>
              ))}
              
              <button
                onClick={addHobby}
                className="w-full py-3 border-2 border-dashed rounded-lg hover:border-primary hover:bg-primary/5 transition-all"
              >
                <Plus className="h-4 w-4 inline mr-2" />
                Ï∑®ÎØ∏ Ï∂îÍ∞Ä
              </button>
            </div>
            
            <div className="mt-6 pt-4 border-t">
              <div className="mb-4">
                <p className="text-sm font-medium mb-2">üéØ Ï∑®ÎØ∏ ÏòàÏãú:</p>
                <div className="flex flex-wrap gap-2">
                  {['üìö ÎèÖÏÑú', '‚òï Ïπ¥Ìéò Ìà¨Ïñ¥', 'üé® Ï†ÑÏãúÌöå Í¥ÄÎûå', '‚úàÔ∏è Ïó¨Ìñâ', 'üèÉ Îü¨Îãù', 'üì∏ ÏÇ¨ÏßÑ', 'üéÆ Í≤åÏûÑ', 'üé¨ ÏòÅÌôî Í∞êÏÉÅ', 'üéµ ÏùåÏïÖ Í∞êÏÉÅ', 'üç≥ ÏöîÎ¶¨', 'üå± Í∞ÄÎìúÎãù', 'üèä ÏàòÏòÅ', 'üßò ÏöîÍ∞Ä', 'üé∏ Í∏∞ÌÉÄ Ïó∞Ï£º', '‚úçÔ∏è Í∏ÄÏì∞Í∏∞', 'üèïÔ∏è Ï∫†Ìïë', 'üé≠ Ïó∞Í∑π Í¥ÄÎûå', 'üé™ Í≥µÏó∞ Í¥ÄÎûå', 'üö¥ ÏûêÏ†ÑÍ±∞', '‚õ∑Ô∏è Ïä§ÌÇ§'].map((example) => (
                    <button
                      key={example}
                      className="px-3 py-1 text-sm bg-muted hover:bg-primary/10 rounded-full transition-all"
                      onClick={() => {
                        if (!aboutInfo.hobbies.includes(example)) {
                          updateAboutInfo('hobbies', [...aboutInfo.hobbies, example])
                        }
                      }}
                    >
                      {example}
                    </button>
                  ))}
                </div>
              </div>
              <p className="text-sm text-muted-foreground mb-4">
                üí° ÌåÅ: Ïù¥Î™®ÏßÄÏôÄ Ìï®Íªò Ï∑®ÎØ∏Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî. ÏòàÏãúÎ•º ÌÅ¥Î¶≠ÌïòÎ©¥ ÏÉà Ï∑®ÎØ∏Í∞Ä Ï∂îÍ∞ÄÎê©ÎãàÎã§.
              </p>
              <div className="flex gap-2">
                <button
                  onClick={() => setShowHobbyModal(false)}
                  className="flex-1 py-2 bg-muted text-foreground rounded-lg hover:bg-muted/80"
                >
                  Îã´Í∏∞
                </button>
                <button
                  onClick={async () => {
                    const success = await saveToFile('about', 'Info', aboutInfo)
                    if (success) {
                      alert('‚úÖ ÏÜåÍ∞ú ÏÑ§Ï†ïÏù¥ ÌååÏùºÏóê Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§!')
                      setShowHobbyModal(false)
                    } else {
                      alert('‚ùå ÌååÏùº Ï†ÄÏû•Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.')
                    }
                  }}
                  className="flex-1 py-2 bg-primary text-primary-foreground rounded-lg hover:bg-primary/90 font-medium"
                >
                  üìÅ ÌååÏùºÏóê Ï†ÄÏû•
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </EditableBackground>
  )
}